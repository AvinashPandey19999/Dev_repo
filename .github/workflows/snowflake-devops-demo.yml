name: sf-devops-script-deployment	

# Controls when the action will run.
on:
 # Triggers the workflow on push or pull request events but only for the "main" branch
 push:
   branches:
    - PROD
    - DEV
    - QA

   paths:
    - 'migrations/**' # location

 workflow_dispatch:

jobs:
  deploy-Snowflake-changes-job:
    runs-on: ubuntu-latest
      
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch 
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Determine branch name
        id: set-branch
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ -z "${{ github.event.inputs.environment }}" ]; then
              echo "Error: 'environment' input is required for manual runs."
              exit 1
            fi
            BRANCH_NAME="${{ github.event.inputs.environment }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi

          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "Resolved Branch Name: $BRANCH_NAME"

      - name: Use Python 3.8.x
        uses: actions/setup-python@v2.2.1

        with:
          python-version: 3.8.x

      - name: Run schemachange for DEV
        if: ${{ steps.extract_branch.outputs.branch == 'DEV' }}
        env:
          NAME: 'DEV'
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.DEV_SF_ROLE }}
          SF_DATABASE: ${{ secrets.DEV_SF_DATABASE }}
          SF_WAREHOUSE: ${{ secrets.DEV_SF_WAREHOUSE }}
          SNOWFLAKE_DATABASE_DEV: ${{ vars.SNOWFLAKE_DATABASE_DEV }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
          BRANCH_NAME_FOR_CONFIG: ${{ steps.extract_branch.outputs.branch }}

        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version
          echo "Step 1: Installing schemachange"
          pip install schemachange==3.7.0

          echo "Step 2: Running schemachange"
          schemachange -f $GITHUB_WORKSPACE/migrations -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE_DEV.CHANGE_HISTORY --create-change-history-table --vars '{"database_name":"$(SNOWFLAKE_DATABASE_DEV)"}' --query-tag "SCHEMACHANGE"

      - name: Run schemachange = QA
        if: ${{ steps.extract_branch.outputs.branch == 'QA' }}
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_ROLE: ${{ secrets.UAT_SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.UAT_SF_WAREHOUSE }}
          SF_DATABASE: ${{ secrets.UAT_SF_DATABASE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
          BRANCH_NAME_FOR_CONFIG: ${{ steps.extract_branch.outputs.branch }} 

        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version

          echo "Step 1: Installing schemachange"
          pip install schemachange==3.7.0

          echo "Step 2: Running schemachange"
          schemachange -f $GITHUB_WORKSPACE/migrations -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE_QA.CHANGE_HISTORY --create-change-history-table

      - name: Run schemachange PRD
        if: ${{ steps.extract_branch.outputs.branch == 'PROD' }}
        env:
          SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SF_USERNAME: ${{ secrets.PRD_SF_DATA_ENGG_USERNAME }}
          SF_ROLE: ${{ secrets.PROD_SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets.PROD_SF_WAREHOUSE }}
          SF_DATABASE: ${{ secrets.PROD_SF_DATABASE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }} 
          BRANCH_NAME_FOR_CONFIG: ${{ steps.extract_branch.outputs.branch }}       
          
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version

          echo "Step 1: Installing schemachange"
          pip install schemachange==3.7.0

          echo "Step 2: Running schemachange"
          schemachange -f $GITHUB_WORKSPACE/migrations -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE_PRD.CHANGE_HISTORY --create-change-history-table

